<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://max397574.github.io/blog</id>
    <title>Max397574 Blog</title>
    <updated>2024-06-16T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://max397574.github.io/blog"/>
    <subtitle>Max397574 Blog</subtitle>
    <icon>https://max397574.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Completion engines in neovim]]></title>
        <id>https://max397574.github.io/blog/completion-engines</id>
        <link href="https://max397574.github.io/blog/completion-engines"/>
        <updated>2024-06-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Everybody uses them and nobody knows how they work - Let's change this.]]></summary>
        <content type="html"><![CDATA[<p>Everybody uses them and nobody knows how they work - Let's change this.</p>
<p><em>Note: When talking about completion engine here I'm mostly talking about
auto completion</em></p>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="current-state">Current state<a class="hash-link" aria-label="Direct link to Current state" title="Direct link to Current state" href="https://max397574.github.io/blog/completion-engines#current-state">​</a></h2>
<p>For neovim many completion plugins exist. Currently the most popular one is
<a href="https://github.com/hrsh7th/nvim-cmp" target="_blank" rel="noopener noreferrer">nvim-cmp</a>. There are a ton of other ones
though for example
<a href="https://github.com/echasnovski/mini.completion" target="_blank" rel="noopener noreferrer">mini.completion</a>,
<a href="https://github.com/noib3/nvim-completion" target="_blank" rel="noopener noreferrer">nvim-completion</a> (in rust),
<a href="https://github.com/hrsh7th/nvim-compe" target="_blank" rel="noopener noreferrer">nvim-compe</a> (deprecated),
<a href="https://github.com/ms-jpq/coq_nvim" target="_blank" rel="noopener noreferrer">coq.nvim</a>,
<a href="https://github.com/mfussenegger/nvim-lsp-compl" target="_blank" rel="noopener noreferrer">nvim-lsp-compl</a>,
<a href="https://github.com/deathbeam/autocomplete.nvim" target="_blank" rel="noopener noreferrer">autocomplete.nvim</a>,
<a href="https://github.com/Shougo/neocomplete.vim" target="_blank" rel="noopener noreferrer">neocomplete.vim</a>,
<a href="https://github.com/vigoux/complementree.nvim" target="_blank" rel="noopener noreferrer">complementree.nvim</a>, and
<a href="https://github.com/nvimdev/epo.nvim" target="_blank" rel="noopener noreferrer">epo.nvim</a>.</p>
<p>Some of them just provide wrappers around builtin mechanics. Nvim-cmp on the
contrary has completely custom menus and sources.</p>
<p>Cmp also was building onto the builtin completion menu for a long time. That's
why it has many similar data structures to the builtin completion. Now it has a
completely custom view, a wildmenu, and the builtin view.</p>
<p>It has many different sources (including lsp) and is widely used in the
community.</p>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="but-how-does-it-work">But how does it work?<a class="hash-link" aria-label="Direct link to But how does it work?" title="Direct link to But how does it work?" href="https://max397574.github.io/blog/completion-engines#but-how-does-it-work">​</a></h2>
<p>This is the problem. We don't know.</p>
<p>For a few reasons I wanted to write a completion engine myself. And I asked a
lot of people how I'd start with that. What are the steps needed and how do the
different parts of such a project work together.</p>
<p>And nobody could tell me. There is also not much information on such a thing
online. The existing plugins either are relying on external things like builtin
completion, are really complicated and not well documented, or just did things
in really weird ways.</p>
<p>So I started figuring out things myself. I read through the sources of different
completion engines. I debugged them manually and tried modifying different
things. Also reading and understanding the lsp-specification was an important
part. After weeks of work I thought that I had a basic understanding of the
different mechanisms involved and the steps required to get completions
displayed to the user.</p>
<p>I wrote those down in long todo lists and then started implementing things. Of
course, I also learned that things were different than I thought they were when I
actually implemented them.</p>
<p>The result of this learning combined with my personal experience and ideas of
what's important for a completion engine resulted in
<a href="https://github.com/max397574/neocomplete.nvim" target="_blank" rel="noopener noreferrer">neocomplete.nvim</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="how-it-does-work">How it does work<a class="hash-link" aria-label="Direct link to How it does work" title="Direct link to How it does work" href="https://max397574.github.io/blog/completion-engines#how-it-does-work">​</a></h2>
<p>In this section I want to explain how a completion engine actually works.
Perhaps there are different approaches to this which I don't know about but this
is how I implemented things in neocomplete.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="starting-to-complete">Starting to complete<a class="hash-link" aria-label="Direct link to Starting to complete" title="Direct link to Starting to complete" href="https://max397574.github.io/blog/completion-engines#starting-to-complete">​</a></h3>
<p>We want an auto completion engine. So we need to to things automatically.</p>]]></content>
        <author>
            <name>Max397574</name>
            <uri>https://github.com/max397574</uri>
        </author>
        <category label="Neovim" term="Neovim"/>
    </entry>
</feed>