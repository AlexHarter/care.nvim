"use strict";(self.webpackChunkmax_397574_github_io=self.webpackChunkmax_397574_github_io||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"completion-engines","metadata":{"permalink":"/blog/completion-engines","editUrl":"https://github.com/max397574/max397574.github.io/blog/2024-06-16-completion-engines.md","source":"@site/blog/2024-06-16-completion-engines.md","title":"Completion engines in neovim","description":"Everybody uses them and nobody knows how they work - Let\'s change this.","date":"2024-06-16T00:00:00.000Z","tags":[{"inline":false,"label":"Neovim","permalink":"/blog/tags/neovim","description":"Posts about neovim"}],"readingTime":2.045,"hasTruncateMarker":true,"authors":[{"name":"Max397574","title":"Open Source Developer","url":"https://github.com/max397574","imageURL":"https://github.com/max397574.png","key":"max397574"}],"frontMatter":{"slug":"completion-engines","title":"Completion engines in neovim","authors":"max397574","tags":["neovim"]},"unlisted":false},"content":"Everybody uses them and nobody knows how they work - Let\'s change this.\\n\\n\x3c!-- truncate --\x3e\\n\\n_Note: When talking about completion engine here I\'m mostly talking about\\nauto completion_\\n\\n## Current state\\n\\nFor neovim many completion plugins exist. Currently the most popular one is\\n[nvim-cmp](https://github.com/hrsh7th/nvim-cmp). There are a ton of other ones\\nthough for example\\n[mini.completion](https://github.com/echasnovski/mini.completion),\\n[nvim-completion](https://github.com/noib3/nvim-completion) (in rust),\\n[nvim-compe](https://github.com/hrsh7th/nvim-compe) (deprecated),\\n[coq.nvim](https://github.com/ms-jpq/coq_nvim),\\n[nvim-lsp-compl](https://github.com/mfussenegger/nvim-lsp-compl),\\n[autocomplete.nvim](https://github.com/deathbeam/autocomplete.nvim),\\n[neocomplete.vim](https://github.com/Shougo/neocomplete.vim),\\n[complementree.nvim](https://github.com/vigoux/complementree.nvim), and\\n[epo.nvim](https://github.com/nvimdev/epo.nvim).\\n\\nSome of them just provide wrappers around builtin mechanics. Nvim-cmp on the\\ncontrary has completely custom menus and sources.\\n\\nCmp also was building onto the builtin completion menu for a long time. That\'s\\nwhy it has many similar data structures to the builtin completion. Now it has a\\ncompletely custom view, a wildmenu, and the builtin view.\\n\\nIt has many different sources (including lsp) and is widely used in the\\ncommunity.\\n\\n## But how does it work?\\n\\nThis is the problem. We don\'t know.\\n\\nFor a few reasons I wanted to write a completion engine myself. And I asked a\\nlot of people how I\'d start with that. What are the steps needed and how do the\\ndifferent parts of such a project work together.\\n\\nAnd nobody could tell me. There is also not much information on such a thing\\nonline. The existing plugins either are relying on external things like builtin\\ncompletion, are really complicated and not well documented, or just did things\\nin really weird ways.\\n\\nSo I started figuring out things myself. I read through the sources of different\\ncompletion engines. I debugged them manually and tried modifying different\\nthings. Also reading and understanding the lsp-specification was an important\\npart. After weeks of work I thought that I had a basic understanding of the\\ndifferent mechanisms involved and the steps required to get completions\\ndisplayed to the user.\\n\\nI wrote those down in long todo lists and then started implementing things. Of\\ncourse, I also learned that things were different than I thought they were when I\\nactually implemented them.\\n\\nThe result of this learning combined with my personal experience and ideas of\\nwhat\'s important for a completion engine resulted in\\n[neocomplete.nvim](https://github.com/max397574/neocomplete.nvim).\\n\\n## How it does work\\n\\nIn this section I want to explain how a completion engine actually works.\\nPerhaps there are different approaches to this which I don\'t know about but this\\nis how I implemented things in neocomplete.\\n\\n### Starting to complete\\n\\nWe want an auto completion engine. So we need to to things automatically."}]}}')}}]);