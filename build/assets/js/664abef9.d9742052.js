"use strict";(self.webpackChunkmax_397574_github_io=self.webpackChunkmax_397574_github_io||[]).push([[278],{4835:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>h,toc:()=>l});var o=t(6070),i=t(5710);const s={slug:"completion-engines",title:"Completion engines in neovim",authors:"max397574",tags:["neovim"]},r="Completion engines in neovim",h={permalink:"/blog/completion-engines",editUrl:"https://github.com/max397574/max397574.github.io/blog/2024-06-16-completion-engines.md",source:"@site/blog/2024-06-16-completion-engines.md",title:"Completion engines in neovim",description:"Everybody uses them and nobody knows how they work - Let's change this.",date:"2024-06-16T00:00:00.000Z",tags:[{inline:!1,label:"Neovim",permalink:"/blog/tags/neovim",description:"Posts about neovim"}],readingTime:2.045,hasTruncateMarker:!0,authors:[{name:"Max397574",title:"Open Source Developer",url:"https://github.com/max397574",imageURL:"https://github.com/max397574.png",key:"max397574"}],frontMatter:{slug:"completion-engines",title:"Completion engines in neovim",authors:"max397574",tags:["neovim"]},unlisted:!1},a={authorsImageUrls:[void 0]},l=[{value:"Current state",id:"current-state",level:2},{value:"But how does it work?",id:"but-how-does-it-work",level:2},{value:"How it does work",id:"how-it-does-work",level:2},{value:"Starting to complete",id:"starting-to-complete",level:3}];function m(e){const n={a:"a",em:"em",h2:"h2",h3:"h3",p:"p",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Everybody uses them and nobody knows how they work - Let's change this."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Note: When talking about completion engine here I'm mostly talking about\nauto completion"})}),"\n",(0,o.jsx)(n.h2,{id:"current-state",children:"Current state"}),"\n",(0,o.jsxs)(n.p,{children:["For neovim many completion plugins exist. Currently the most popular one is\n",(0,o.jsx)(n.a,{href:"https://github.com/hrsh7th/nvim-cmp",children:"nvim-cmp"}),". There are a ton of other ones\nthough for example\n",(0,o.jsx)(n.a,{href:"https://github.com/echasnovski/mini.completion",children:"mini.completion"}),",\n",(0,o.jsx)(n.a,{href:"https://github.com/noib3/nvim-completion",children:"nvim-completion"})," (in rust),\n",(0,o.jsx)(n.a,{href:"https://github.com/hrsh7th/nvim-compe",children:"nvim-compe"})," (deprecated),\n",(0,o.jsx)(n.a,{href:"https://github.com/ms-jpq/coq_nvim",children:"coq.nvim"}),",\n",(0,o.jsx)(n.a,{href:"https://github.com/mfussenegger/nvim-lsp-compl",children:"nvim-lsp-compl"}),",\n",(0,o.jsx)(n.a,{href:"https://github.com/deathbeam/autocomplete.nvim",children:"autocomplete.nvim"}),",\n",(0,o.jsx)(n.a,{href:"https://github.com/Shougo/neocomplete.vim",children:"neocomplete.vim"}),",\n",(0,o.jsx)(n.a,{href:"https://github.com/vigoux/complementree.nvim",children:"complementree.nvim"}),", and\n",(0,o.jsx)(n.a,{href:"https://github.com/nvimdev/epo.nvim",children:"epo.nvim"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Some of them just provide wrappers around builtin mechanics. Nvim-cmp on the\ncontrary has completely custom menus and sources."}),"\n",(0,o.jsx)(n.p,{children:"Cmp also was building onto the builtin completion menu for a long time. That's\nwhy it has many similar data structures to the builtin completion. Now it has a\ncompletely custom view, a wildmenu, and the builtin view."}),"\n",(0,o.jsx)(n.p,{children:"It has many different sources (including lsp) and is widely used in the\ncommunity."}),"\n",(0,o.jsx)(n.h2,{id:"but-how-does-it-work",children:"But how does it work?"}),"\n",(0,o.jsx)(n.p,{children:"This is the problem. We don't know."}),"\n",(0,o.jsx)(n.p,{children:"For a few reasons I wanted to write a completion engine myself. And I asked a\nlot of people how I'd start with that. What are the steps needed and how do the\ndifferent parts of such a project work together."}),"\n",(0,o.jsx)(n.p,{children:"And nobody could tell me. There is also not much information on such a thing\nonline. The existing plugins either are relying on external things like builtin\ncompletion, are really complicated and not well documented, or just did things\nin really weird ways."}),"\n",(0,o.jsx)(n.p,{children:"So I started figuring out things myself. I read through the sources of different\ncompletion engines. I debugged them manually and tried modifying different\nthings. Also reading and understanding the lsp-specification was an important\npart. After weeks of work I thought that I had a basic understanding of the\ndifferent mechanisms involved and the steps required to get completions\ndisplayed to the user."}),"\n",(0,o.jsx)(n.p,{children:"I wrote those down in long todo lists and then started implementing things. Of\ncourse, I also learned that things were different than I thought they were when I\nactually implemented them."}),"\n",(0,o.jsxs)(n.p,{children:["The result of this learning combined with my personal experience and ideas of\nwhat's important for a completion engine resulted in\n",(0,o.jsx)(n.a,{href:"https://github.com/max397574/neocomplete.nvim",children:"neocomplete.nvim"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"how-it-does-work",children:"How it does work"}),"\n",(0,o.jsx)(n.p,{children:"In this section I want to explain how a completion engine actually works.\nPerhaps there are different approaches to this which I don't know about but this\nis how I implemented things in neocomplete."}),"\n",(0,o.jsx)(n.h3,{id:"starting-to-complete",children:"Starting to complete"}),"\n",(0,o.jsx)(n.p,{children:"We want an auto completion engine. So we need to to things automatically."})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},5710:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>h});var o=t(758);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);