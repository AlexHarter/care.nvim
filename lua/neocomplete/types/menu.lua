--- The completion menu of neocomplete
---@class neocomplete.menu
--- Create a new instance of the menu
---@field new fun(): neocomplete.menu
--- Draws the menu
---@field draw fun(self: neocomplete.menu): nil
--- Returns true if completion window is visible
---@field is_open fun(self: neocomplete.menu): boolean
--- Select next entry in menu
---@field select_next fun(self: neocomplete.menu, count: integer): nil
--- Select previous entry in menu
---@field select_prev fun(self: neocomplete.menu, count: integer): nil
--- Opens the menu with specified entries
---@field open fun(self: neocomplete.menu, entries: neocomplete.entry[], offset: integer): nil
--- Closes the window of the menu
---@field close fun(self: neocomplete.menu): nil
--- Gets the currently selected entry
---@field get_active_entry fun(self: neocomplete.menu): neocomplete.entry?
--- Selects the current entry and inserts it's text
---@field confirm fun(self: neocomplete.menu): nil
--- Completes with the given entry
---@field complete fun(self: neocomplete.menu, entry: neocomplete.entry): nil
--- Readjust size of completino window
---@field readjust_win fun(self: neocomplete.menu, offset: integer): nil
--- Checks if docs are open
---@field docs_visible fun(self: neocomplete.menu): boolean
--- Scroll in the docs window
---@field scroll_docs fun(self: neocomplete.menu, delta: integer): nil
--- Wrapper for utilities for the window of the menu
---@field menu_window neocomplete.window
--- Wrapper for utilities for the window of the docs
---@field docs_window neocomplete.window
--- Instance of ghost text to draw the ghost text
---@field ghost_text neocomplete.ghost_text
--- Entries of the menu
---@field entries neocomplete.entry[]
--- Namespace used for the menu
---@field ns integer
--- Neocomplete config to be used in the menu
---@field config neocomplete.config
--- Buffer of the menu
---@field buf integer
--- Window of menu
---@field winnr integer?
--- Index of selected item
---@field index integer
--- Buffer for the scrollbar
---@field scrollbar_buf integer