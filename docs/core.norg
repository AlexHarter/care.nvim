@document.meta
title: Core
description: Type description of neocomplete.nvim source
authors: [
    max397574
]
categories: [
    docs,
    types
]
created: 2023-11-15T17:42:46+0100
updated: 2024-06-09T10:21:16+0100
tangle: {
    languages: {
        lua: ../lua/neocomplete/types/core.lua
    }
    scope: tagged
    delimiter: none
}
version: 1.1.1
@end

* General
  This module is for the core of neocomplete. There all comes together with the menu being opened
  and the completion triggered.
  #tangle
  @code lua
  --- The core module of neocomplete
  ---@class neocomplete.core
  @end

** New
   Use this function to create a new instance.
   #tangle
   @code lua
   --- Create a new instance of the core
   ---@field new fun(): neocomplete.core
   @end

* Methods
** Complete
   This function starts the completion. It goes through all the sources, triggers them (completion
   or sorting) and opens the menu with the result.
   #tangle
   @code lua
   --- Complete
   ---@field complete fun(self: neocomplete.core, reason: neocomplete.completionReason?): nil
   @end

** On Change
   This function is invoked on every text change. It updates the context field and triggers
   completion if it changed.
   #tangle
   @code lua
   --- The function that gets invoked when the text changes
   ---@field on_change fun(neocomplete.core): nil
   @end

** Setup
   The setup function is used to setup neocomplete so it will actually provide autocompletion when
   typing by setting up an autocommand.
   #tangle
   @code lua
   --- Setup core (for now autocommands)
   ---@field setup fun(self: neocomplete.core): nil
   @end

* Fields
** Context
   This is used to store the current context. There is always a new one created in `on_change` and
   compared to see if it changed.
   #tangle
   @code lua
   --- Context instance of the core
   ---@field context neocomplete.context
   @end

** Menu
   In this field a menu instance which is used in core is stored.
   #tangle
   @code lua
   --- Menu instance of the core
   ---@field menu neocomplete.menu
   @end
