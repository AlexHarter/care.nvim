@document.meta
title: Source
description: Type description of neocomplete.nvim config
authors: [
    max397574
]
categories: [
    docs,
    types
]
tangle: {
    languages: {
        lua: ../lua/neocomplete/types/config.lua
    }
    scope: tagged
    delimiter: none
}
created: 2023-11-17T16:29:17+0100
updated: 2024-07-13T10:21:09+0100
version: 1.1.1
@end

* General
  The config of neocomplete is used to configure the ui and neocomplete itself.
  #tangle
  @code lua
  --- Configuration for neocomplete.nvim
  ---@class neocomplete.config
  @end

  There are two main parts to the config. The first one is the `ui` field and the second on is the
  rest of the configuration which is for configuring neocomplete itself.

** UI
   In the ui field the completion menu, the docs view and the format of the entries are configured.
   There is also a field for configuring type icons.
   #tangle
   @code lua
   --- Configuration for the ui of neocomplete
   ---@field ui neocomplete.config.ui
   @end

** Snippet expansion
   Here a function for expanding snippets is defined. By default this is the builtin
   `vim.snippet.expand()`. You can also use a plugin like luasnip for this like this:
   @code lua
   snippet_expansion = function(body)
       require("luasnip").lsp_expand(body)
   end
   @end

   #tangle
   @code lua
   --- Function used to expand snippets
   ---@field snippet_expansion fun(string): nil
   @end

** Selection behavior
   With the selection behavior the user can determine what happens when selecting an entry. This can
   either be `select` or `insert`. Selecting will just select the entry and do nothing else. Insert
   will actually insert the text of the entry (this is not necessarily the whole text).

   #tangle
   @code lua
   --- Behavior when selecting entry
   ---@field selection_behavior "select"|"insert"
   @end

** Keyword pattern
   Pattern used to determine keywords, used to determine what to use for filtering and what to
   remove if insert text is used.
   #tangle
   @code lua
   --- Pattern used to determine keywords
   ---@field keyword_pattern string
   @end

** Enabled
   This function can be used to disable neocomplete in certain contexts. By default this disables
   neocomplete in prompts.
   #tangle
   @code lua
   --- Configuration for the ui of neocomplete
   ---@field enabled fun(): boolean
   @end

* UI
  The ui configuration is used to configure the whole ui of neocomplete. One of the main goals of
  this is to be as extensible as possible. This is especially important for the completion entries.
  Read more about that under {:./design:**** Configuraton of item display}.
  #tangle
  @code lua
  --- The main class for the ui configuration of neocomplete.nvim
  ---@class neocomplete.config.ui
  @end
  The most important part for many users will be the `menu` field. It's used to configure the
  completion menu.
  #tangle
  @code lua
  --- Configuration of the completion menu of neocomplete.nvim
  ---@field menu neocomplete.config.ui.menu
  @end

  You can also configure the documentation view just like the main menu.
  #tangle
  @code lua
  --- Configuration of the documentation view of neocomplete.nvim
  ---@field docs_view neocomplete.config.ui.docs
  @end

  Lastly the users can also configure the icons which will be used for the different items.
  #tangle
  @code lua
  --- The icons for the different compltion item kinds
  ---@field type_icons neocomplete.config.ui.type_icons
  @end

*** Ghost text
    with this option the user can determine if ghost text should be displayed. Ghost text is just
    virtual text which shows a preview of the entry.
    #tangle
    @code lua
    --- Whether to show ghost text
    ---@field ghost_text boolean
    @end

** Menu
   This configuration should allow you to completely adapt the completion menu to your likings.
   #tangle
   @code lua
   --- Configuration of the completion menu of neocomplete.nvim
   ---@class neocomplete.config.ui.menu
   @end

   It includes some basic window properties like the border and the maximum height of the window. It
   also has a field to define the character used for the scrollbar.
   Set `scrollbar` to `nil` value to disable the scrollbar.
   #tangle
   @code lua
   --- Maximum height of the menu
   ---@field max_height integer
   --- The border of the completion menu
   ---@field border string|string[]|string[][]
   --- Character used for the scrollbar
   ---@field scrollbar string?
   @end

** Position
   If the menu should be displayed on top, bottom or automatically
   #tangle
   @code lua
   --- Position of the menu
   ---@field position "auto"|"bottom"|"top"
   @end

   Another field is `format_entry`. This is a function which recieves an entry of the completion
   menu and determines how it's formatted. For that a table with text-highlight chunks like
   `:h nvim_buf_set_extmarks()` is used. You can create sections which are represented by tables
   and can have a different alignment each. This is specified with another field which takes a table
   with the alignment of each section.

   For example you want to have the label of an entry in a red highlight and an icon in a entry-kind
   specific color left aligned first and then the source of the entry right aligned in blue.
   You could do that like this:
   @code lua
   format_entry = function(entry)
   return {
   -- The first section with the two chunks for the label and the icon
   { { entry.label .. " ", "MyRedHlGroup" }, { entry.kind, "HighlightKind" .. entry.kind } }
   -- The second section for the source
   { { entry.source, "MyBlueHlGroup" } }
   }
   end,
   alignment = { "left", "right" }
   @end

   Notice that there are multiple differences between having one table containing the chunks for the
   label and kind and having them separately. The latter would require another entry in the `alignment`
   table. It would also change the style of the menu because the left sides of the icons would be
   aligned at the same column and not be next to the labels. In the example there also was some
   spacing added in between the two.

   #tangle
   @code lua
   --- How an entry should be formatted
   ---@field format_entry fun(entry: neocomplete.entry): { [1]: string, [2]: string }[][]
   --- How the sections in the menu should be aligned
   ---@field alignment ("left"|"center"|"right")[]
   @end

** Documentation view
   This configuration allows you to configure the documentation view.
   #tangle
   @code lua
   --- Configuration of the completion menu of neocomplete.nvim
   ---@class neocomplete.config.ui.docs
   @end
   It consists of some basic window properties like the border and the maximum height of the window.
   It also has a field to define the character used for the scrollbar.
   #tangle
   @code lua
   --- Maximum height of the documentation view
   ---@field max_height integer
   --- Maximum width of the documentation view
   ---@field max_width integer
   --- The border of the documentation view
   ---@field border string|string[]|string[][]
   --- Character used for the scrollbar
   ---@field scrollbar string
   @end

** Type Icons
   This is a table which defines the different icons.
   #tangle
   @code lua
   --- The icons used for the different completion item types
   ---@alias neocomplete.config.ui.type_icons table<string, string>
   @end
