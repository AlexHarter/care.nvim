@document.meta
title: Menu
description: Type description of neocomplete.nvim menu
authors: [
    max397574
]
categories: [
    docs,
    types
]
created: 2024-05-29T11:30:25+0100
updated: 2024-06-18T18:28:16+0100
tangle: {
    languages: {
        lua: ../lua/neocomplete/types/menu.lua
    }
    scope: tagged
    delimiter: none
}
version: 1.1.1
@end

* General
  This is the main class of the neocomplete completion menu. The menu is used to display completion
  entries and also contains the logic for selecting and inserting the completions.
  #tangle
  @code lua
  --- The completion menu of neocomplete
  ---@class neocomplete.menu
  @end

* Internals
** Index
   The index is used to determine the selected entry. It is used to get this entry when confirming
   the completion.
   The function to select the next and previous entries simply change this index.

* Methods
** New
   Creates a new instance of the completion menu.
   #tangle
   @code lua
   --- Create a new instance of the menu
   ---@field new fun(): neocomplete.menu
   @end

** Draw
   Draws the menu. This includes formatting the entries with the function from the config and
   setting the virtual text used to display the labels. It also adds the highlights for the selected
   entry and for the matched chars.
   #tangle
   @code lua
   --- Draws the menu
   ---@field draw fun(self: neocomplete.menu): nil
   @end

** Open win
   This function opens the window for the completion menu. It contains the logic to determine it's
   dimensions and position.
   #tangle
   @code lua
   --- Opens window for the menu
   ---@field open_win fun(self: neocomplete.menu, offset: integer): nil
   @end

** Set scroll
   This is a function used to set the scrollingn of the window. The direction parameter is used to
   determine if the index was increased or decreased. It should be `1` if the index increased and
   `-1` if it decreased.
   #tangle
   @code lua
   --- Sets the scroll of the window
   ---@field set_scroll fun(self: neocomplete.menu, direction: integer): nil
   @end

** Is open
   This is a function which can be used to determine whether the completion menu is open or not.
   This is especially useful for mappings which have a fallback action when the menu isn't visible.
   #tangle
   @code lua
   --- Returns true if completion window is visible
   ---@field is_open fun(self: neocomplete.menu): boolean
   @end


** Select next
   This function can be used to select the next entry. It accepts a count to skip over some entries.
   It automatically wraps at the bottom and jumps up again.
   #tangle
   @code lua
   --- Select next entry in menu
   ---@field select_next fun(self: neocomplete.menu, count: integer): nil
   @end

** Select prev
   This function is used to select the previous entry analogous to {** Select next}
   #tangle
   @code lua
   --- Select previous entry in menu
   ---@field select_prev fun(self: neocomplete.menu, count: integer): nil
   @end

** Open
   The `open` function is used to open the completion menu with a specified set of entries. This
   includes opening the window and displaying the text.
   #tangle
   @code lua
   --- Opens the menu with specified entries
   ---@field open fun(self: neocomplete.menu, entries: neocomplete.entry[], offset: integer): nil
   @end

** Close
   This function closes the menu and resets some internal things.
   #tangle
   @code lua
   --- Closes the window of the menu
   ---@field close fun(self: neocomplete.menu): nil
   @end

** Get active entry
   With this function you can get the currently selected entry. This can be used for the docs view
   or some other api functions. It is also used when the selection is confirmed.
   #tangle
   @code lua
   --- Gets the currently selected entry
   ---@field get_active_entry fun(self: neocomplete.menu): neocomplete.entry?
   @end

** Confirm
   This is the function to trigger the completion with a selected entry. It gets the selected entry
   closes the menu and completes.
   #tangle
   @code lua
   --- Selects the current entry and inserts it's text
   ---@field confirm fun(self: neocomplete.menu): nil
   @end

** Complete
   This function completes with a given entry. That means it removes text used for filtering
   (if necessary), expands snippet with the configured function, applies text edits and lsp
   commands.
   #tangle
   @code lua
   --- Completes with the given entry
   ---@field complete fun(self: neocomplete.menu, completion_item: lsp.CompletionItem): nil
   @end

* Fields
** Entries
   This field is used to store all the entries of the completion menu.
   #tangle
   @code lua
   --- Entries of the menu
   ---@field entries neocomplete.entry[]
   @end

** Namespace
   The namespace is used to draw the extmarks and add the additional highlights.
   #tangle
   @code lua
   --- Namespace used for the menu
   ---@field ns integer
   @end

** Config
   In this field the user config is stored for easier access.
   #tangle
   @code lua
   --- Neocomplete config to be used in the menu
   ---@field config neocomplete.config
   @end

** Buffer
   This is the buffer used for the menu. It's just created once when initially creating a new
   instance.
   #tangle
   @code lua
   --- Buffer of the menu
   ---@field buf integer
   @end

** Window
   Window number of the window used to display the menu. This is always newly created when the menu
   gets opened and is only set if the menu is open.
   #tangle
   @code lua
   --- Window of menu
   ---@field winnr integer?
   @end

** Index
   The index is used to get and track the currently selected item. It gets modified by the functions
   to select next and previous entry.
   #tangle
   @code lua
   --- Index of selected item
   ---@field index integer
   @end
