@document.meta
title: Menu
description: Type description of neocomplete.nvim menu
authors: [
    max397574
]
categories: [
    docs,
    types
]
created: 2024-05-29T11:30:25+0100
updated: 2024-05-30T17:41:03+0100
tangle: {
    languages: {
        lua: ../lua/neocomplete/types/menu.lua
    }
    scope: tagged
    delimiter: none
}
version: 1.1.1
@end

* General
  #tangle
  @code lua
  --- The completion menu of neocomplete
  ---@class neocomplete.menu
  @end

* Methods
** New
   Creates a new instance
   #tangle
   @code lua
   --- Create a new instance of the menu
   ---@field new fun(): neocomplete.menu
   @end

** Draw
   #tangle
   @code lua
   --- Draws the menu
   ---@field draw fun(self: neocomplete.menu): nil
   @end

** Open win
   #tangle
   @code lua
   --- Opens window for the menu
   ---@field open_win fun(self: neocomplete.menu): nil
   @end


** Select next
   #tangle
   @code lua
   --- Select next entry in menu
   ---@field select_next fun(self: neocomplete.menu, count: integer): nil
   @end

** Select prev
   #tangle
   @code lua
   --- Select previous entry in menu
   ---@field select_prev fun(self: neocomplete.menu, count: integer): nil
   @end

** Open
   #tangle
   @code lua
   --- Opens the menu with specified entries
   ---@field open fun(self: neocomplete.menu, entries: neocomplete.entry[]): nil
   @end

** Close
   #tangle
   @code lua
   --- Closes the window of the menu
   ---@field close fun(self: neocomplete.menu): nil
   @end

** Get active entry
   #tangle
   @code lua
   --- Gets the currently selected entry
   ---@field get_active_entry fun(self: neocomplete.menu): neocomplete.entry?
   @end

** Confirm
   #tangle
   @code lua
   --- Selects the current entry and inserts it's text
   ---@field confirm fun(self: neocomplete.menu): nil
   @end

** confirm
   #tangle
   @code lua
   --- Selects the current entry and inserts it's text
   ---@field complete fun(self: neocomplete.menu, entry: neocomplete.entry): nil
   @end

* Fields
** Entries
   #tangle
   @code lua
   --- Entries of the menu
   ---@field entries neocomplete.entry[]
   @end

** Namespace
   #tangle
   @code lua
   --- Namespace used for the menu
   ---@field ns integer
   @end

** Config
   #tangle
   @code lua
   --- Neocomplete config to be used in the menu
   ---@field config neocomplete.config
   @end

** Input
   Currently just used to test highlighting match characters
   #tangle
   @code lua
   --- Input of the user which is fuzzy matched
   ---@field input string
   @end

** Buffer
   Buffer used for the menu
   #tangle
   @code lua
   --- Buffer of the menu
   ---@field buf integer
   @end

** Window
   #tangle
   @code lua
   --- Window of menu
   ---@field winnr integer?
   @end

** Index
   used to get and track the currently selected item
   #tangle
   @code lua
   --- Index of selected item
   ---@field index integer
   @end
